generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "metrics", "postgresqlExtensions", "relationJoins"]
  engineType      = "binary"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
  extensions   = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id                    String                 @id @unique
  email                 String                 @db.VarChar(255)
  firstName             String                 @db.VarChar(100)
  lastName              String                 @db.VarChar(100)
  profileImage          String
  connectedAccountId    String?                @db.VarChar(100)
  stripeConnectedLinked Boolean                @default(false)
  role                  UserRole               @default(USER)
  locals                Local[]
  marketStands          MarketStand[]
  products              Product[]
  productReviews        ProductReview[]
  productStatusChanges  ProductStatusHistory[]
  standReviews          StandReview[]
  standStatusChanges    StandStatusHistory[]
  engagement            UserEngagement?
  sessions              VisitorSession[]

  @@index([email], map: "user_email_idx")
  @@index([connectedAccountId], map: "user_stripe_idx")
}

model MarketStand {
  id            String               @id @default(uuid())
  name          String               @db.VarChar(255)
  description   String?
  images        String[]
  tags          String[]             @db.VarChar(50)
  latitude      Float
  longitude     Float
  locationName  String               @db.VarChar(255)
  locationGuide String
  website       String?
  socialMedia   String[]
  status        Status               @default(PENDING)
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  userId        String
  averageRating Float?
  totalReviews  Int                  @default(0)
  hours         Json?
  user          User                 @relation(fields: [userId], references: [id])
  products      Product[]            @relation("ProductToMarketStand")
  metrics       StandMetrics?
  reviews       StandReview[]
  statusHistory StandStatusHistory[]

  @@index([latitude, longitude], map: "market_stand_location_idx")
  @@index([isActive], map: "market_stand_active_idx")
  @@index([userId])
}

model Product {
  id                 String                 @id @default(uuid())
  name               String                 @db.VarChar(255)
  price              Int
  description        String
  images             String[]
  tags               String[]               @db.VarChar(50)
  inventory          Int                    @default(0)
  inventoryUpdatedAt DateTime?
  status             Status                 @default(PENDING)
  isActive           Boolean                @default(true)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  userId             String
  marketStandId      String
  localId            String?
  averageRating      Float?
  totalReviews       Int                    @default(0)
  local              Local?                 @relation("ProductToLocal", fields: [localId], references: [id])
  marketStand        MarketStand            @relation("ProductToMarketStand", fields: [marketStandId], references: [id])
  user               User                   @relation(fields: [userId], references: [id])
  metrics            ProductMetrics?
  reviews            ProductReview[]
  statusHistory      ProductStatusHistory[]

  @@index([isActive, inventory], map: "product_active_inventory_idx")
  @@index([updatedAt(sort: Desc)], map: "product_updated_at_idx")
  @@index([marketStandId], map: "product_market_stand_idx")
  @@index([localId], map: "product_local_idx")
  @@index([userId], map: "product_user_idx")
}

model ProductReview {
  id                 String   @id @default(uuid())
  rating             Int      @db.SmallInt
  comment            String
  images             String[]
  isVerifiedPurchase Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  productId          String
  userId             String
  helpfulVotes       Int      @default(0)
  reportCount        Int      @default(0)
  isVisible          Boolean  @default(true)
  product            Product  @relation(fields: [productId], references: [id])
  user               User     @relation(fields: [userId], references: [id])

  @@index([productId, isVisible], map: "product_review_product_idx")
  @@index([userId])
}

model StandReview {
  id                 String      @id @default(uuid())
  rating             Int         @db.SmallInt
  comment            String
  images             String[]
  isVerifiedCustomer Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  marketStandId      String
  userId             String
  helpfulVotes       Int         @default(0)
  reportCount        Int         @default(0)
  isVisible          Boolean     @default(true)
  marketStand        MarketStand @relation(fields: [marketStandId], references: [id])
  user               User        @relation(fields: [userId], references: [id])

  @@index([marketStandId, isVisible], map: "stand_review_stand_idx")
  @@index([userId])
}

model ProductStatusHistory {
  id          String   @id @default(uuid())
  productId   String
  oldStatus   Status
  newStatus   Status
  changedById String
  note        String
  createdAt   DateTime @default(now())
  changedBy   User     @relation(fields: [changedById], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([changedById])
}

model StandStatusHistory {
  id            String      @id @default(uuid())
  marketStandId String
  oldStatus     Status
  newStatus     Status
  changedById   String
  note          String
  createdAt     DateTime    @default(now())
  changedBy     User        @relation(fields: [changedById], references: [id])
  marketStand   MarketStand @relation(fields: [marketStandId], references: [id])

  @@index([marketStandId])
  @@index([changedById])
}

model ProductMetrics {
  id             String                @id @default(uuid())
  productId      String                @unique
  views          Int                   @default(0)
  uniqueViews    Int                   @default(0)
  addedToCart    Int                   @default(0)
  purchases      Int                   @default(0)
  revenue        Int                   @default(0)
  conversionRate Float?
  dailyMetrics   ProductDailyMetrics[]
  product        Product               @relation(fields: [productId], references: [id])

  @@index([productId], map: "product_metrics_product_idx")
}

model ProductDailyMetrics {
  id              String         @id @default(uuid())
  productMetricId String
  date            DateTime       @db.Date
  views           Int            @default(0)
  uniqueViews     Int            @default(0)
  addedToCart     Int            @default(0)
  purchases       Int            @default(0)
  revenue         Int            @default(0)
  productMetrics  ProductMetrics @relation(fields: [productMetricId], references: [id])

  @@index([productMetricId, date])
}

model StandMetrics {
  id                 String              @id @default(uuid())
  marketStandId      String              @unique
  totalViews         Int                 @default(0)
  uniqueViews        Int                 @default(0)
  totalOrders        Int                 @default(0)
  totalRevenue       Int                 @default(0)
  averageOrderValue  Float?
  returningCustomers Int                 @default(0)
  dailyMetrics       StandDailyMetrics[]
  marketStand        MarketStand         @relation(fields: [marketStandId], references: [id])

  @@index([marketStandId], map: "stand_metrics_stand_idx")
}

model StandDailyMetrics {
  id            String       @id @default(uuid())
  standMetricId String
  date          DateTime     @db.Date
  views         Int          @default(0)
  uniqueViews   Int          @default(0)
  orders        Int          @default(0)
  revenue       Int          @default(0)
  standMetrics  StandMetrics @relation(fields: [standMetricId], references: [id])

  @@index([standMetricId, date])
}

model UserEngagement {
  id             String   @id @default(uuid())
  userId         String   @unique
  lastVisit      DateTime
  totalVisits    Int      @default(0)
  totalPurchases Int      @default(0)
  totalSpent     Int      @default(0)
  favoriteStands String[]
  searchHistory  String[]
  categoryViews  Json
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VisitorSession {
  id          String    @id @default(uuid())
  sessionId   String    @unique
  userId      String?
  startTime   DateTime  @default(now())
  endTime     DateTime?
  deviceType  String?   @db.VarChar(50)
  browser     String?   @db.VarChar(50)
  ipAddress   String?   @db.VarChar(45)
  pagesViewed Json
  user        User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionId])
}

model Local {
  id               String        @id @default(uuid())
  name             String        @db.VarChar(255)
  description      String
  story            String
  images           String[]
  farmingPractices String
  teamMembers      Json
  certifications   Json
  seasonalSchedule Json
  events           Json
  operatingHours   Json
  wholesaleInfo    String?
  contactForm      Boolean       @default(true)
  latitude         Float
  longitude        Float
  locationName     String        @db.VarChar(255)
  locationGuide    String
  website          String?
  socialMedia      String[]
  status           Status        @default(PENDING)
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  metrics          LocalMetrics?
  products         Product[]     @relation("ProductToLocal")

  @@index([latitude, longitude], map: "local_location_idx")
  @@index([isActive], map: "local_active_idx")
  @@index([userId], map: "local_user_idx")
}

model LocalMetrics {
  id                     String @id @default(uuid())
  localId                String @unique
  views                  Int    @default(0)
  uniqueViews            Int    @default(0)
  contactFormSubmissions Int    @default(0)
  productViews           Int    @default(0)
  eventSignups           Int    @default(0)
  local                  Local  @relation(fields: [localId], references: [id])

  @@index([localId], map: "local_metrics_local_idx")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}
